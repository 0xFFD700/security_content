# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.19

dependencies:
  cache_directories:
    - "~/.apt-cache"
  pre:
    - sudo rm -rf /var/cache/apt/archives && sudo ln -s ~/.apt-cache /var/cache/apt/archives && mkdir -p ~/.apt-cache/partial

apt-run: &apt-install
  name: install system packages
  command: |
    sudo apt update -qq
    sudo apt install -y python-dev python3-dev -qq
    # install go for other testing tools
    # but first lets clean up the env
    if  [ -f goinstall.sh ]; then
        rm goinstall.sh
    fi
    if [ -d ~/.go ]; then
        rm -rf ~/.go
    fi
    wget https://raw.githubusercontent.com/canha/golang-tools-install-script/master/goinstall.sh
    sudo chown circleci goinstall.sh
    chmod +x goinstall.sh
    ./goinstall.sh

executors:
  content-executor:
    docker:
      - image: circleci/python:latest
    working_directory: ~/repo

jobs:
  validate-content:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [[ ! -z "${CIRCLE_PULL_REQUEST}" &&  ! -z "${CIRCLE_PR_NUMBER}" ]]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
                cd security-content
                git fetch origin pull/${CIRCLE_PR_NUMBER}/head:${CIRCLE_BRANCH}
                git checkout ${CIRCLE_BRANCH}
            elif [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - restore_cache:
          key: virtualenv
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - save_cache:
          key: virtualenv
          paths:
            - "/security-content/venv"
      - run:
          name: run validate
          command: |
            cd security-content
            source venv/bin/activate
            python bin/validate.py --path . --verbose
      - run:
          name: run doc-gen
          command: |
            cd security-content
            source venv/bin/activate
            python bin/doc-gen.py --path . --output docs -v
      - run:
          name: check for broken links using liche
          command: |
            echo 'export GOROOT=~/.go' >> $BASH_ENV
            echo 'export PATH=$GOROOT/bin:$PATH' >> $BASH_ENV
            echo 'export GOPATH=~/go' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export GO111MODULE="on"' >> $BASH_ENV
            source $BASH_ENV
            go get -u github.com/raviqqe/liche
            cd security-content
            liche docs/stories_categories.md -v -t 30
            liche README.md -v -t 30
  build-sources:
    executor: content-executor
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - run:
          name: run generate
          command: |
            cd security-content
            source venv/bin/activate
            python bin/generate.py --path . --output package -v
            # make a copy of use_case_lib in order to have ES work :-(
            cp package/default/use_case_library.conf package/default/analyticstories.conf
      - run:
          name: update version and build number
          command: |
            cd security-content
            # check if tag is set, get build number from the tag if set
            if [ -z "${CIRCLE_TAG}" ]; then
                CONTENT_VERSION=$(grep -oP "(\d.\d.\d+$)" package/default/content-version.conf)
                echo "detected content version: $CONTENT_VERSION"
            else
                CONTENT_VERSION=$(echo $CIRCLE_TAG | grep -oP "\d.\d.\d+")
                echo "content version: $CONTENT_VERSION, set by tag: $CIRCLE_TAG"
            fi
            # update build number and version
            sed -i "s/build = .*$/build = $CIRCLE_BUILD_NUM/g" package/default/app.conf
            sed -i "s/^version = .*$/version = $CONTENT_VERSION/g" package/default/app.conf
            sed -i "s/\"version\": .*$/\"version\": \"$CONTENT_VERSION\"/g" package/app.manifest
            sed -i "s/version = .*$/version = $CONTENT_VERSION/g" package/default/content-version.conf
            tar -czf content-pack-build.tar.gz package/*
      - persist_to_workspace:
          root: security-content/
          paths:
              - content-pack-build.tar.gz
  build-package:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/dist
      - run:
          name: grab splunk packaging toolkit
          command: |
            curl -Ls https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-0.9.0.tar.gz -o ~/splunk-packaging-toolkit-latest.tar.gz
            mkdir ~/slim-latest
            tar -zxf ~/splunk-packaging-toolkit-latest.tar.gz -C ~/slim-latest --strip-components=1
      - run:
          name: install splunk packaging toolkit (slim)
          command: |
              cd ~/slim-latest
              sudo pip install --upgrade pip setuptools
              sudo pip install virtualenv
              virtualenv --python=/usr/bin/python2.7 --clear venv
              source venv/bin/activate
              pip install semantic_version
              pip install .
      - run:
          name: create a .spl for this build using slim
          command: |
              source ~/slim-latest/venv/bin/activate
              cd ~/dist
              tar -zxf content-pack-build.tar.gz
              mv package DA-ESS-ContentUpdate
              slim package -o upload DA-ESS-ContentUpdate
              cp upload/*.tar.gz DA-ESS-ContentUpdate-latest.tar.gz
      - store_artifacts:
          path: ~/dist/upload
          destination: package/
      - persist_to_workspace:
          root: ~/dist
          paths:
             - DA-ESS-ContentUpdate-latest.tar.gz
  run-appinspect:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/
      - run: *apt-install
      - run:
          name: grab appinspect
          command: |
            curl -Ls https://download.splunk.com/misc/appinspect/splunk-appinspect-2.0.0.tar.gz -o appinspect-lastest.tar.gz
            mkdir appinspect-latest
            tar -zxf appinspect-lastest.tar.gz -C appinspect-latest --strip-components=1
      - run:
          name: install app inspect
          command: |
            cd appinspect-latest
            rm -rf venv
            sudo pip install --upgrade pip setuptools
            sudo pip install virtualenv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install .
      - run:
          name: run app inspect
          command: |
            cd appinspect-latest
            source venv/bin/activate
            splunk-appinspect inspect ~/DA-ESS-ContentUpdate-latest.tar.gz --included-tags=cloud --max-messages=all
      - persist_to_workspace:
          root: ~/
          paths:
             - DA-ESS-ContentUpdate-latest.tar.gz
  community-api-update:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone community https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - aws-cli/setup:
          profile-name: default
      - run: 
          name: update community api sources
          command: |
            cd security-content
            aws s3 cp stories s3://security-content-community/stories --recursive --exclude "*" --include "*.yml"
            aws s3 cp baselines s3://security-content-community/baselines --recursive --exclude "*" --include "*.yml"
            aws s3 cp detections s3://security-content-community/detections --recursive --exclude "*" --include "*.yml"
            aws s3 cp investigations s3://security-content-community/investigations --recursive --exclude "*" --include "*.yml"
            aws s3 cp responses s3://security-content-community/responses --recursive --exclude "*" --include "*.yml"
            aws s3 cp lookups s3://security-content-community/lookups --recursive --exclude "*" --include "*.yml"
            aws s3 cp macros s3://security-content-community/macros --recursive --exclude "*" --include "*.yml"
      - persist_to_workspace:
          root: ~/
          paths:
             - DA-ESS-ContentUpdate-latest.tar.gz
  update-sources-github:
    executor: content-executor
    steps:
      - attach_workspace:
          at: ~/
      - run: *apt-install
      - run:
          name: checkout repo
          command: |
            mkdir ~/latest
            tar -zxf ~/DA-ESS-ContentUpdate-latest.tar.gz -C ~/latest --strip-components=1
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run:
          name: install python dependencies
          command: |
            cd security-content
            rm -rf venv
            virtualenv --python=/usr/bin/python3 --clear venv
            source venv/bin/activate
            pip install -q -r requirements.txt
      - run:
          name: run doc-gen
          command: |
            cd security-content
            source venv/bin/activate
            python bin/doc-gen.py --path . --output docs -v
      - run:
          name: update github with new docs and package bits
          command: |
            cd security-content
            rm -rf package
            mv ~/latest package
            # configure git to prep for commit
            git config credential.helper 'cache --timeout=120'
            git config user.email "research@splunk.com"
            git config user.name "research bot"
            git config --global push.default simple
            git add package/*
            git add docs/*
            git commit --allow-empty -m "updating docs and package bits [ci skip]"
            # Push quietly to prevent showing the token in log
            git push https://${GITHUB_TOKEN}@github.com/splunk/security-content.git ${CIRCLE_BRANCH}
            mv package DA-ESS-ContentUpdate
            tar -czf DA-ESS-ContentUpdate-latest.tar.gz DA-ESS-ContentUpdate/*
      - persist_to_workspace:
          root: security-content/
          paths:
              - DA-ESS-ContentUpdate-latest.tar.gz
  publish-github-release:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: ~/repo/updated
      - run:
          name: publish release on github
          command: |
            mv ~/repo/updated/DA-ESS-ContentUpdate-latest.tar.gz ~/DA-ESS-ContentUpdate-${CIRCLE_TAG}.tar.gz
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/DA-ESS-ContentUpdate-${CIRCLE_TAG}.tar.gz
      - persist_to_workspace:
          root: ~/repo/updated
          paths:
              - DA-ESS-ContentUpdate-latest.tar.gz
  attack-range-update:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: sync latest ESCU to the Attack Range S3 bucket for apps
          command: |
            aws s3 cp DA-ESS-ContentUpdate-latest.tar.gz s3://attack-range-appbinaries/ 
  master-api-update:
    executor: aws-cli/default
    steps:
      - run:
          name: checkout repo
          command: |
            if [ "${CIRCLE_BRANCH}" == "" ]; then
                git clone https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            else
                git clone --branch ${CIRCLE_BRANCH} https://${GITHUB_TOKEN}@github.com/splunk/security-content.git
            fi
      - run: *apt-install
      - aws-cli/setup:
          profile-name: default
      - run: 
          name: update api sources
          command: |
            aws s3 cp stories s3://security-content/stories --recursive --exclude "*" --include "*.yml"
            aws s3 cp baselines s3://security-content/baselines --recursive --exclude "*" --include "*.yml"
            aws s3 cp detections s3://security-content/detections --recursive --exclude "*" --include "*.yml"
            aws s3 cp investigations s3://security-content/investigations --recursive --exclude "*" --include "*.yml"
            aws s3 cp responses s3://security-content/responses --recursive --exclude "*" --include "*.yml"
            aws s3 cp lookups s3://security-content/lookups --recursive --exclude "*" --include "*.yml"
            aws s3 cp macros s3://security-content/macros --recursive --exclude "*" --include "*.yml"
workflows:
  version: 2.1
  validate-and-build:
    jobs:
      - validate-content:
        # build always
          filters:
            tags:
              only: /.*/
      - build-sources:
        # build always
          requires:
            - validate-content
          filters:
            tags:
              only: /.*/
      - build-package:
        # build always
          requires:
            - validate-content
            - build-sources
          filters:
            tags:
              only: /.*/
      - run-appinspect:
        # build always
          requires:
            - validate-content
            - build-sources
            - build-package
          filters:
            tags:
              only: /.*/
      - community-api-update:
        # build only on community changes
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
          filters:
            branches:
              only: community
      - update-sources-github:
        # update package and docs in github if is a tag
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-github-release:
        # publish release in github if is a tag
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - update-sources-github
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - attack-range-update:
        # update the attack range with the latest build
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - update-sources-github
            - publish-github-release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - master-api-update:
        # update master API from develop if is a tag
          requires:
            - validate-content
            - build-sources
            - build-package
            - run-appinspect
            - update-sources-github
            - publish-github-release
            - attack-range-update
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
