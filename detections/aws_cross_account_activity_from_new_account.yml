asset_type: AWS Instance
baselines:
  - id: 1cc22b09-c867-416e-a511-cb36ac44aee2
    name: Previously Seen AWS Cross Account Activity
    type: splunk
confidence: medium
creation_date: '2018-02-01'
data_metadata:
  data_source:
    - AWS CloudTrail logs
  data_sourcetypes:
    - aws:cloudtrail
  providing_technologies:
    - AWS
description: This search looks for AssumeRole events where an IAM role in a different
  account is requested for the first time.
detect:
  splunk:
    correlation_rule:
      notable:
        nes_fields: requestingAccountId, requestedAccountId, src_user, dest_user
        rule_description: Access to $dest_user$ was requested for the first time by
          $src_user$
        rule_title: AWS Account $dest_user$ access by $src_user$
      risk:
        risk_object: dest_user
        risk_object_type:
          - user
        risk_score: 20
      schedule:
        cron_schedule: 5 * * * *
        earliest_time: -70m@m
        latest_time: -10m@m
      search: sourcetype=aws:cloudtrail eventName=AssumeRole | spath output=requestingAccountId
        path=userIdentity.accountId | spath output=requestedAccountId path=resources{}.accountId
        | search requestingAccountId=* | where requestingAccountId != requestedAccountId
        | inputlookup append=t previously_seen_aws_cross_account_activity | multireport
        [| stats min(eval(coalesce(firstTime, strptime(_time,"%Y-%m-%d %H:%M:%S"))))
        as firstTime max(eval(coalesce(strptime(_time,"%Y-%m-%d %H:%M:%S"), lastTime)))
        as lastTime by requestingAccountId, requestedAccountId | outputlookup previously_seen_aws_cross_account_activity
        | where fact=fiction] [| eventstats min(eval(coalesce(firstTime, strptime(_time,"%Y-%m-%d
        %H:%M:%S")))) as firstTime, max(eval(coalesce(strptime(_time,"%Y-%m-%d %H:%M:%S"),
        lastTime))) as lastTime by requestingAccountId, requestedAccountId | where
        firstTime >= relative_time(now(), "-70m@m") AND isnotnull(_time) | spath output=accessKeyId
        path=responseElements.credentials.accessKeyId | spath output=requestingARN
        path=resources{}.ARN | stats values(awsRegion) as awsRegion values(firstTime)
        as firstTime values(lastTime) as lastTime values(sharedEventID) as sharedEventID,
        values(requestingARN) as src_user, values(responseElements.assumedRoleUser.arn)
        as dest_user by _time, requestingAccountId, requestedAccountId, accessKeyId]
        | table _time, firstTime, lastTime, src_user, requestingAccountId, dest_user,
        requestedAccountId, awsRegion, accessKeyId, sharedEventID
      suppress:
        suppress_fields: requestingAccountId, requestedAccountId
        suppress_period: 14400s
eli5: 'This search\

  1. Retrieves the **AssumeRole** event\

  1. Verifies that the log entry contains a value for the account ID of the requesting
  account\

  1. Ensures that the requesting account ID does not match the account ID of the requested
  account\

  1. Pulls in the previously seen requesting and requested account IDs\

  1. Splits up and executes multiple search paths at the same.\

  1. The first path determines the **firstTime** and **lastTime** entries for the
  cache file\

  1. Outputs the data to the cache file.\

  1. Creates a conditional statement that is always false (both because we don''t
  want these values to exit the search pipeline and because we think we''re clever).The
  second pipeline adds the **firstTime** and **lastTime** entries to search results.
  Next, it filters out any account pairs that haven''t been seen for the first time
  within the last hour. The `isnotnull(_time)` will remove the entries from the cache
  file.\

  The search finishes by gathering the data that it will display to the user.'
entities:
  - dest_user
how_to_implement: You must install the AWS App for Splunk (version 5.1.0 or later)
  and Splunk Add-on for AWS (version 4.4.0 or later), then configure your CloudTrail
  inputs. Run the `Previously Seen AWS Cross Account Activity` support search only
  once to create the baseline of previously seen cross account activity. Thanks to
  Pablo Vega at Recurly for suggesting improvements to the search.
id: 64fbbddf-fabf-4edf-80b3-0cc36ef37727
investigations:
  - id: 3d6c3213-5fff-4a1e-b57d-b24c262171e7
    name: Get Notable History
    type: splunk
  - id: 703b65a4-a0ae-4171-965d-45507506c64f
    name: AWS Investigate User Activities By AccessKeyId
    type: splunk
  - id: bc91a8cd-35e7-4bb2-6140-e756cc46fd71
    name: AWS Activities By Source User(ARN)
    type: splunk
known_false_positives: Using multiple AWS accounts and roles is perfectly valid behavior.
  It's suspicious when an account requests privileges of an account it hasn't before.
  You should validate with the account owner that this is a legitimate request.
maintainers:
  - company: Splunk
    email: davidd@splunk.com
    name: David Dorsey
mappings:
  cis20:
    - CIS 16
  kill_chain_phases:
    - Actions on Objectives
  mitre_attack:
    - Credential Access
  nist:
    - PR.AC
    - PR.DS
    - DE.AE
modification_date: '2020-03-16'
name: AWS Cross Account Activity From Previously Unseen Account
original_authors:
  - company: Splunk
    email: davidd@splunk.com
    name: David Dorsey
references: []
security_domain: network
spec_version: 2
type: splunk
version: '3.0'
